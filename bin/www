#!/usr/bin/env node

// BASE SETUP
// =============================================================================

// call the packages we need
var express    = require('express');        // call express
var request    = require('request');
var env        = require('dotenv').config();
var app        = express();
var server     = require('http').Server(app);
var cors       = require('cors')                // define our app using express
var bodyParser = require('body-parser');
var weather    = require('weather-js');
var ZenHub     = require('node-zenhub');
var io         = require('socket.io')(server);

var zenHubApi  = new ZenHub(process.env.ZENHUB);

// configure app to use bodyParser()
// this will let us get the data from a POST
app.use(cors());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

var port = process.env.PORT || 8080;        // set our port

// ROUTES FOR OUR API
// =============================================================================
var router = express.Router();              // get an instance of the express Router

// test route to make sure everything is working (accessed at GET http://localhost:8080/api)
router.get('/', function(req, res) {
    res.json({ message: 'hooray! welcome to our api!' });
});

router.get('/cxs-app', function(req, res) {
  zenHubApi.getBoard(26181696, function(err, result) {
    if (err) {
      console.log(err);
      return;
    }

    let formattedResponse = result.map(function(response) {
      return {
        name: response.name,
        issueLength: response.issues.length
      }
    })
    res.json({
      title: "Application Repo",
      data: formattedResponse
     });
  });
});

router.get('/cxs-api', function(req, res) {
  zenHubApi.getBoard(26181661, function(err, result) {
    if (err) {
      console.log(err);
    }
    let formattedResponse = result.map(function(response) {
      return {
        name: response.name,
        issueLength: response.issues.length
      }
    })
    res.json({
      title: "API Repo",
      data: formattedResponse
     });
  });
});

router.get('/weather', function(req, res) {
  var weatherResults = weather.find({search: 'Mason, OH', degreeType: 'F'}, function(err, result) {
    if (err) {
      console.log(err);
    }
    result[0].current.type = 'weather';
    res.json({ weather: result[0] });
  });
});

router.post('/llamaStream', function(req, res) {
  if ( req.body.token && req.body.token === process.env.SLACKTOKEN ) {
    // from slack
    if (req.body.text === 'help') {
      let message = `
      \`\`\`
          /llama [integer 1 - 3] - Change llama stream
          /llama cycle - Will cycle through streams
          /llama freeze - Will stop on a certain stream
          /llama youtube [url] - Will change llama stream into requested youtube video
          /llama youtube stop - Will stop youtube video and return to llama stream
      \`\`\`
      `;

      request({method: 'POST', url: req.body.responseUrl, json: true, body: {text: message}}, (err, res) => {
        if (err) {
          console.log(err);
        }
      });
    } else {
      io.emit('llama stream', {arg: req.body.text});
      io.emit('system message', {message: req.body.user_name + ' change the llaama stream to #' + req.body.text});
    }
  } else {
    // from application
    io.emit('llama stream', {arg: req.body.arg});
  }

  res.json(req.body);
});

// more routes for our API will happen here

/**
 * SOCKET IO Commands
 */
io.on('connection', function(socket) {
  var msg = 'New socket connection. ' + socket.id;
  console.log(msg);
  io.emit('system message', { message:  msg});

  socket.on('disconnect', function() {
    var msg = 'Closed a socket connection.';
    console.log(msg);
    io.emit('system message', { message: msg });
  });
});

// REGISTER OUR ROUTES -------------------------------
// all of our routes will be prefixed with /api
app.use('/api', router);

// START THE SERVER
// =============================================================================
server.listen(port);
console.log('Magic happens on port ' + port);
